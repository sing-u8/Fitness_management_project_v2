- reducer
    -- reducer를 생성할 때 'createImmerReducer'를 이용하기 (기본적으로 immer를 사용하기에 변수 저장하는 방식이 편해짐)
    -- reducer의 State를 작성할 때, 필요에 따라 ngrx/entity를 사용할 수 있음.

- selector

- action
    -- API를 요청이 필요한 경우 action 접두사로 (as-[async-start], ad-[async-done])을 사용하여 ngrx effect가 호출되는 action임을 알리기 위함.
    -- createAction(type, config) : type 명 예시 --- `[${FeatureKey}] Async Start Load Sales` / `[${FeatureKey}] Update Sales`
    -- action의 이름은 되도록 아래의 문구의 의미를 참고하여 작성하기

        addOne: Add one entity to the collection.
        addMany: Add multiple entities to the collection.
        setAll: Replace current collection with provided collection.
        setOne: Add or Replace one entity in the collection.
        setMany: Add or Replace multiple entities in the collection.
        removeOne: Remove one entity from the collection.
        removeMany: Remove multiple entities from the collection, by id or by predicate.
        removeAll: Clear entity collection.
        updateOne: Update one entity in the collection. Supports partial updates.
        updateMany: Update multiple entities in the collection. Supports partial updates.
        upsertOne: Add or Update one entity in the collection.
        upsertMany: Add or Update multiple entities in the collection.
        mapOne: Update one entity in the collection by defining a map function.
        map: Update multiple entities in the collection by defining a map function, similar to Array.map.

        - 예시 -

        export const loadUsers = createAction('[User/API] Load Users', props<{ users: User[] }>());
        export const setUsers = createAction('[User/API] Set Users', props<{ users: User[] }>());
        export const addUser = createAction('[User/API] Add User', props<{ user: User }>());
        export const setUser = createAction('[User/API] Set User', props<{ user: User }>());
        export const upsertUser = createAction('[User/API] Upsert User', props<{ user: User }>());
        export const addUsers = createAction('[User/API] Add Users', props<{ users: User[] }>());
        export const upsertUsers = createAction('[User/API] Upsert Users', props<{ users: User[] }>());
        export const updateUser = createAction('[User/API] Update User', props<{ update: Update<User> }>());
        export const updateUsers = createAction('[User/API] Update Users', props<{ updates: Update<User>[] }>());
        export const mapUser = createAction('[User/API] Map User', props<{ entityMap: EntityMapOne<User> }>());
        export const mapUsers = createAction('[User/API] Map Users', props<{ entityMap: EntityMap<User> }>());
        export const deleteUser = createAction('[User/API] Delete User', props<{ id: string }>());
        export const deleteUsers = createAction('[User/API] Delete Users', props<{ ids: string[] }>());
        export const deleteUsersByPredicate = createAction('[User/API] Delete Users By Predicate', props<{ predicate: Predicate<User> }>());
        export const clearUsers = createAction('[User/API] Clear Users');

        참고 : https://v15.ngrx.io/guide/entity/adapter

- effect

    -- method 이름 끝에 '$' 표기 (크게 의미없지만 관례 같은 것)
